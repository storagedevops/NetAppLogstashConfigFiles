input {
  tcp {
    port => 514
    type => syslog
  }
  udp {
    port => 514
    type => syslog
  }
}

filter {

  if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} \[%{DATA:cluster}-%{DATA:node}:%{DATA:EMS_Indentifier}:%{LOGLEVEL:log-level}]: ?%{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    mutate {
      add_field => {
        "nodename" => "%{cluster}-%{node}"
      }
      add_tag => ["%{nodename}"]
      remove_field => ["node"]
    }
    dns {
      reverse => [ "host" ]
      action => "replace"
    }
    mutate {
      add_tag => [ "%{log-level}","%{EMS_Indentifier}","%{cluster}" ]
    }
    if [EMS_Indentifier] == "wafl.vvol.renamed" and "RECLAIM" in [syslog_message] and "clone" not in [syslog_message] {
           mutate{
             add_tag => ["Volume_Reclaimed"]
                 }
    }
    if [EMS_Indentifier] == "mhost.svc.watchdog" and "RPC" in [syslog_message] {
           mutate{
             add_tag => ["RPC_Error"]
                 }
    }
    if [EMS_Indentifier] == "perf.ccma.pWorkQ.overrun" {
           mutate{
             add_tag => ["Perf_Arch_Error"]
                 }
    }
    if [EMS_Indentifier] == "cmd.quota.throughput" {
           mutate{
             add_tag => ["Perf_Arch_Datastore_Error"]
                 }
    }
    if "va2" in [cluster] {
      mutate{
      add_field => {
        "geoLONG" => "-77.329428"
        }
      add_field => {
        "geoLAT" => "38.9488690"
        }
     }
    }
    if [EMS_Indentifier] == "wafl.volume.clone.created" {
           mutate{
             add_tag => ["Clone_Created"]
                 }
    }
    if [EMS_Indentifier] == "snap.DataSource" {
           mutate{
             add_tag => ["WFA4_Snapshot_Collection"]
                 }
    }
    if [EMS_Indentifier] == "clone.Count" {
           mutate{
             add_tag => ["WFA4_CloneCount_Collection"]
                 }
    }
    if [EMS_Indentifier] == "wafl.vvol.destroyed" and "clone" in [syslog_message] {
           mutate{
             add_tag => ["Clone_Destroyed"]
                 }
    }
    if [EMS_Indentifier] == "wafl.vvol.renamed" and "clone" in [syslog_message] and "RECLAIM" in [syslog_message] {
           mutate{
             add_tag => ["Clone_Reclaimed"]
                 }
    }
    if [EMS_Indentifier] == "sshd.auth.loginDenied" {
           mutate {
             add_tag => ["failed_login"]
                  }
    }
    if [EMS_Indentifier] == "raid.config.spare.disk.failed" {
           mutate {
             add_tag => ["Spare_Disk_FAILED"]
                  }
    }
    if [EMS_Identifier] == "monitor.globalStatus.nonCritical" and "disk" in [syslog_message] and "failed" in [syslog_message] {
            mutate {
             add_tag => ["RAID_Disk_FAILED"]
            }
    }
    if [EMS_Identifier] == "raid.disk.predictiveFailure" and "prefailed" in [syslog_message] {
            mutate {
             add_tag => ["RAID_Disk_Failing"]
            }
    }
   if [EMS_Indentifier] == "wafl.vol.full" {
           mutate {
             add_tag => ["Volume_Full"]
           }
    }
    if  "Starting" in [message] {
         mutate{
           add_tag => ["Started"]
               }
  }
    if  "Stopping" in [message] {
       mutate{
         add_tag => ["Stopped"]
             }
  }


  }
}


output {
  stdout {
    codec => "rubydebug"
  }
  elasticsearch {
    hosts => "localhost:9200"
    index => "logstash-%{+YYYY.MM.dd}"
  }
}
